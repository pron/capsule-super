plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '1.2.1'
    id 'maven'
    id 'signing'
}

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

group       = "co.paralleluniverse"
version     = "0.1.0-SNAPSHOT"
status      = "integration"
description = "Super Caplet"
ext.url             = "https://github.com/puniverse/${project.name}"
ext.vendor          = "Parallel Universe Software Co."
ext.licenseName     = "Eclipse Public License - v 1.0"
ext.licenseUrl      = "http://www.eclipse.org/legal/epl-v10.html"
ext.scmUrl          = "https://github.com/puniverse/${project.name}"
ext.scmConnection   = "https://github.com/puniverse/${project.name}.git"
ext.distDir         = "$buildDir/dist"
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
    ext.sonatypeUsername = ""
    ext.sonatypePassword = ""
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile 'co.paralleluniverse:capsule:1.0-rc2-SNAPSHOT'
    compile 'com.github.jnr:jnr-ffi:2.0.3'    
    compile 'com.github.jnr:jnr-posix:3.0.17'
    
    testCompile group: 'junit', name: 'junit', version: '4.10'
}

//jar {
//    // from configurations.runtime
//    // exclude '*capsule*.jar'
//    from { configurations.runtime.collect { zipTree(it) } }
//    exclude 'Capsule.class'
//    exclude 'META-INF/**'
//    
//    manifest {
//        attributes(
//	    'Main-Class'  : 'SuperCapsule'
//        )
//    }
//}

shadowJar {
    outputs.upToDateWhen { false }
        
    // artifactAttached = false
    classifier = '' // overwrite jar
    destinationDir = file("$buildDir/libs")

    dependencies { exclude(dependency('co.paralleluniverse:capsule:.*')) }
    
    exclude 'META-INF/**'
    // exclude 'licenses/**'
    exclude 'about.html'
    exclude '**/version.properties'

    relocate 'org.', 'capsule.org.'
    relocate 'jnr.', 'capsule.jnr.'
    // relocate 'jni.', 'capsule.jni.'
    // relocate 'com.', 'capsule.com.'
            
    manifest {
        attributes(
	    'Main-Class'  : 'SuperCapsule'
        )
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

///////// Publish Artifacts
artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
}

signing {
    required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { deployment -> signing.signPom(deployment) }

            repository(
                url: (isReleaseVersion ?
                        "https://oss.sonatype.org/service/local/staging/deploy/maven2" :
                        "https://oss.sonatype.org/content/repositories/snapshots")) {
                // User and Password are taken from ~/.gradle/gradle.properties
                authentication(userName: project.sonatypeUsername, password: project.sonatypePassword)
            }
            pom.project {
                name project.name
                packaging 'jar'
                description project.description
                url project.url
                scm {
                    url project.scmUrl
                    connection project.scmConnection
                    developerConnection project.scmConnection
                }
                licenses {
                    license {
                        name project.licenseName
                        url project.licenseUrl
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'pron'
                        name 'Ron Pressler'
                    }
                }
            }
        }
    }
}

install.repositories.mavenInstaller {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

uploadArchives.repositories.mavenDeployer {
    pom.whenConfigured {
        it.dependencies.clear()
    }
}

[assemble, build, install, signArchives, uploadArchives]*.dependsOn shadowJar

